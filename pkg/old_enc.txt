func EncKeyOne(fileName string) ([]byte, string) {
	aesKey := make([]byte, 32)

	if _, errKey := rand.Reader.Read(aesKey); errKey != nil {
		log.Fatal(errKey)
	}

	//fileName passes numbers and old string formatting
	encKeyFile := fmt.Sprintf("./data/pks/%s_key", fileName)

	os.Create(encKeyFile)
	//byte data written in second param
	os.WriteFile(encKeyFile, aesKey, 0666)

	// under ~/data/FILENAME_key a 32bit key is generated
	return aesKey, encKeyFile

}

func EncProcTwo(fileName string, pk []byte) string {

	textData, _ := os.ReadFile(fileName)

	//pk aka privateKey used to determine Data block here
	block, errBlock := aes.NewCipher(pk)
	if errBlock != nil {
		log.Fatal(errBlock)
	}

	gcm, errGcm := cipher.NewGCM(block)
	if errGcm != nil {
		log.Fatal(errGcm)
	}

	nonce := make([]byte, gcm.NonceSize())
	if _, errNo := io.ReadFull(rand.Reader, nonce); errNo != nil {
		log.Fatal(errNo)
	}

	cipherData := gcm.Seal(nonce, nonce, textData, nil)

	hexString := hex.EncodeToString(cipherData)

	return hexString

}

func EncWrite(cipherData string, baseName string) {

	baseNameTwo := strings.ReplaceAll(baseName, "./data/pks/", "")
	encKeyFile := fmt.Sprintf("./data/enc/%s_enc.txt", baseNameTwo)

	os.Create(encKeyFile)
	//byte data written in second param
	os.WriteFile(encKeyFile, []byte(cipherData), 0666)

}




main.go:
// key, baseName := pkg.EncKeyOne(fileName)
		// encData := pkg.EncProcTwo(fileName, key)
		// fmt.Println(encData)
		// pkg.EncWrite(encData, baseName)
