package pkg

//broken af

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/rand"
	"encoding/hex"
	"fmt"
	"io"
	"os"
)

func RetrieveGCM() cipher.AEAD {
	key, _ := os.ReadFile("./data/pks/one_key")

	block, err := aes.NewCipher(key)
	if err != nil {
		fmt.Println("error creating aes block cipher", err)

	}
	gcm, err := cipher.NewGCM(block)
	if err != nil {
		fmt.Println("error setting gcm mode", err)

	}
	nonce := make([]byte, gcm.NonceSize())
	if _, err := io.ReadFull(rand.Reader, nonce); err != nil {
		fmt.Println("error generating the nonce ", err)

	}

	return gcm
}

func DecFlow() {

	gcm := RetrieveGCM()

	encByte, _ := os.ReadFile("./data/enc/one_key_enc.txt")
	data := string(encByte)

	// fmt.Println(data)

	decodedCipherText, _ := hex.DecodeString(data)

	decStr, _ := gcm.Open(nil, decodedCipherText[:gcm.NonceSize()], decodedCipherText[gcm.NonceSize():], nil)

	fmt.Println(string(decStr))

}
